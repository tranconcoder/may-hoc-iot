{{!-- Trang quản lý camera --}}

<link rel="stylesheet" href="/public/css/camera-managment.css">

<div class="container-fluid camera-management-page">
  <div class="page-header">
    <h1 class="page-title">Quản lý Camera</h1>
    <div class="page-actions">
      <button class="btn btn-primary" id="btnAddCamera">
        <i class="fas fa-plus"></i> Thêm Camera
      </button>
      <button class="btn btn-secondary" id="btnRefreshCameras">
        <i class="fas fa-sync-alt"></i> Làm mới
      </button>
    </div>
  </div>

  <div class="camera-filter-bar">
    <div class="filter-group">
      <label for="cameraStatusFilter">Trạng thái:</label>
      <select id="cameraStatusFilter" class="form-control">
        <option value="all">Tất cả</option>
        <option value="active">Đang hoạt động</option>
        <option value="inactive">Không hoạt động</option>
      </select>
    </div>
    <div class="filter-group">
      <label for="cameraLocationFilter">Khu vực:</label>
      <select id="cameraLocationFilter" class="form-control">
        <option value="all">Tất cả khu vực</option>
        <!-- Dynamic locations will be populated via JavaScript -->
      </select>
    </div>
    <div class="filter-group search-group">
      <input type="text" id="cameraSearchInput" class="form-control" placeholder="Tìm kiếm camera...">
      <button class="btn btn-outline-secondary" id="btnSearch">
        <i class="fas fa-search"></i>
      </button>
    </div>
  </div>

  <!-- Camera List Container -->
  <div class="tab-content" id="cameraTabContent">
    <div class="tab-pane fade show active" id="cameras-content" role="tabpanel">
      <div class="camera-grid" id="cameraGrid">
        <!-- Camera cards will be dynamically populated here via JavaScript -->
      </div>
    </div>
  </div>
  
  <!-- No cameras message - initially hidden -->
  <div class="no-cameras-found" id="noCamerasMessage" style="display: none;">
    <i class="fas fa-video-slash"></i>
    <p>Không có camera nào được tìm thấy</p>
    <button class="btn btn-primary" id="btnAddFirstCamera">Thêm camera đầu tiên</button>
  </div>
</div>

<!-- JavaScript cho tương tác trang quản lý camera -->
<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Elements
    const btnAddCamera = document.getElementById('btnAddCamera');
    const btnRefreshCameras = document.getElementById('btnRefreshCameras');
    const btnAddFirstCamera = document.getElementById('btnAddFirstCamera');
    const cameraGrid = document.getElementById('cameraGrid');
    const noCamerasMessage = document.getElementById('noCamerasMessage');
    const searchInput = document.getElementById('cameraSearchInput');
    const statusFilter = document.getElementById('cameraStatusFilter');
    const locationFilter = document.getElementById('cameraLocationFilter');
    
    // Fetch and display cameras
    function fetchCameras() {
      fetch('/api/camera/all')
        .then(response => response.json())
        .then(data => {
          if (data.statusCode === 200 && Array.isArray(data.metadata)) {
            renderCameras(data.metadata);
            updateLocationFilter(data.metadata);
          } else {
            showNoCamerasMessage();
          }
        })
        .catch(error => {
          console.error('Error fetching cameras:', error);
          showNoCamerasMessage();
        });
    }
    
    // Render cameras from API response
    function renderCameras(cameras) {
      if (!cameras || cameras.length === 0) {
        showNoCamerasMessage();
        return;
      }
      
      cameraGrid.innerHTML = '';
      noCamerasMessage.style.display = 'none';
      
      cameras.forEach(camera => {
        const statusClass = camera.camera_status ? 'active' : 'inactive';
        const statusText = camera.camera_status ? 'Đang hoạt động' : 'Không hoạt động';
        
        const cameraCard = document.createElement('div');
        cameraCard.className = 'camera-card';
        cameraCard.dataset.cameraId = camera._id;
        
        cameraCard.innerHTML = `
          <div class="camera-preview">
            <img src="/img/camera-preview-placeholder.jpg" alt="${camera.camera_name}" onerror="this.src='/img/camera-offline.jpg'">
            <div class="camera-status ${statusClass}">
              <i class="fas fa-circle"></i>
              <span>${statusText}</span>
            </div>
            <div class="camera-resolution">HD</div>
          </div>
          <div class="camera-info">
            <h3 class="camera-name">${camera.camera_name}</h3>
            <p class="camera-location"><i class="fas fa-map-marker-alt"></i> ${camera.camera_location}</p>
            <p class="camera-ip"><i class="fas fa-network-wired"></i> ID: ${camera._id}</p>
          </div>
          <div class="camera-actions">
            <button class="btn btn-sm btn-primary btn-view" data-id="${camera._id}">
              <i class="fas fa-eye"></i> Xem
            </button>
            <button class="btn btn-sm btn-info btn-edit" data-id="${camera._id}">
              <i class="fas fa-edit"></i> Sửa
            </button>
            <button class="btn btn-sm btn-danger btn-delete" data-id="${camera._id}">
              <i class="fas fa-trash"></i> Xóa
            </button>
          </div>
        `;
        
        cameraGrid.appendChild(cameraCard);
      });
      
      // Add event listeners to the new buttons
      attachButtonEventListeners();
    }
    
    // Update location filter with unique locations
    function updateLocationFilter(cameras) {
      const locations = new Set();
      cameras.forEach(camera => {
        if (camera.camera_location) {
          locations.add(camera.camera_location);
        }
      });
      
      // Clear existing options except "All"
      locationFilter.innerHTML = '<option value="all">Tất cả khu vực</option>';
      
      // Add unique locations
      locations.forEach(location => {
        const option = document.createElement('option');
        option.value = location;
        option.textContent = location;
        locationFilter.appendChild(option);
      });
    }
    
    function showNoCamerasMessage() {
      cameraGrid.innerHTML = '';
      noCamerasMessage.style.display = 'flex';
    }
    
    // Attach event listeners to camera action buttons
    function attachButtonEventListeners() {
      // View buttons
      document.querySelectorAll('.btn-view').forEach(button => {
        button.addEventListener('click', function() {
          const cameraId = this.getAttribute('data-id');
          window.location.href = `/views/dashboard/cameras/${cameraId}`;
        });
      });
      
      // Edit buttons
      document.querySelectorAll('.btn-edit').forEach(button => {
        button.addEventListener('click', function() {
          const cameraId = this.getAttribute('data-id');
          window.location.href = `/views/cameras/edit/${cameraId}`;
        });
      });
      
      // Delete buttons
      document.querySelectorAll('.btn-delete').forEach(button => {
        button.addEventListener('click', function() {
          const cameraId = this.getAttribute('data-id');
          if (confirm('Bạn có chắc chắn muốn xóa camera này?')) {
            deleteCamera(cameraId);
          }
        });
      });
    }
    
    // Delete camera function
    function deleteCamera(cameraId) {
      fetch(`/api/camera/${cameraId}`, {
        method: 'DELETE'
      })
      .then(response => {
        if (!response.ok) {
          throw new Error('Không thể xóa camera');
        }
        return response.json();
      })
      .then(() => {
        // Remove from UI
        const cameraCard = document.querySelector(`.camera-card[data-camera-id="${cameraId}"]`);
        if (cameraCard) {
          cameraCard.remove();
        }
        
        // Check if any cameras remain
        const remainingCameras = document.querySelectorAll('.camera-card');
        if (remainingCameras.length === 0) {
          showNoCamerasMessage();
        }
      })
      .catch(error => {
        alert('Lỗi: ' + error.message);
      });
    }
    
    // Apply filters
    function applyFilters() {
      const searchTerm = searchInput.value.toLowerCase();
      const statusValue = statusFilter.value;
      const locationValue = locationFilter.value;
      
      const cameras = document.querySelectorAll('.camera-card');
      let visibleCount = 0;
      
      cameras.forEach(camera => {
        const cameraName = camera.querySelector('.camera-name').textContent.toLowerCase();
        const cameraLocation = camera.querySelector('.camera-location').textContent.toLowerCase();
        const cameraStatus = camera.querySelector('.camera-status').classList.contains(statusValue);
        
        // Apply filters
        let showCamera = true;
        
        // Filter by name/location
        if (searchTerm && !cameraName.includes(searchTerm) && !cameraLocation.includes(searchTerm)) {
          showCamera = false;
        }
        
        // Filter by status
        if (statusValue !== 'all' && !cameraStatus) {
          showCamera = false;
        }
        
        // Filter by location
        if (locationValue !== 'all') {
          const locationMatch = cameraLocation.includes(locationValue.toLowerCase());
          if (!locationMatch) {
            showCamera = false;
          }
        }
        
        // Show or hide camera
        camera.style.display = showCamera ? '' : 'none';
        if (showCamera) visibleCount++;
      });
      
      // Show "no cameras" message if all are filtered out
      if (visibleCount === 0 && cameras.length > 0) {
        noCamerasMessage.style.display = 'flex';
        noCamerasMessage.querySelector('p').textContent = 'Không tìm thấy camera nào phù hợp với bộ lọc';
      } else {
        noCamerasMessage.style.display = cameras.length === 0 ? 'flex' : 'none';
        noCamerasMessage.querySelector('p').textContent = 'Không có camera nào được tìm thấy';
      }
    }
    
    // Event listeners
    if (btnAddCamera) {
      btnAddCamera.addEventListener('click', function() {
        window.location.href = '/views/cameras/add';
      });
    }
    
    if (btnAddFirstCamera) {
      btnAddFirstCamera.addEventListener('click', function() {
        window.location.href = '/views/cameras/add';
      });
    }
    
    if (btnRefreshCameras) {
      btnRefreshCameras.addEventListener('click', function() {
        fetchCameras();
      });
    }
    
    if (searchInput) searchInput.addEventListener('input', applyFilters);
    if (statusFilter) statusFilter.addEventListener('change', applyFilters);
    if (locationFilter) locationFilter.addEventListener('change', applyFilters);
    
    // Initial fetch
    fetchCameras();
  });
</script>
